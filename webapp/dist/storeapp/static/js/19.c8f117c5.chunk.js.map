{"version":3,"sources":["views/user/signin/index.js","../node_modules/semantic-ui-react/dist/es/collections/Message/MessageContent.js","../node_modules/semantic-ui-react/dist/es/collections/Message/MessageHeader.js","../node_modules/semantic-ui-react/dist/es/collections/Message/MessageItem.js","../node_modules/semantic-ui-react/dist/es/collections/Message/MessageList.js","../node_modules/semantic-ui-react/dist/es/collections/Message/Message.js"],"names":["connect","state","user","dispatch","signIn","userData","props","t","useTranslation","useForm","handleSubmit","errors","control","className","onSubmit","data","as","Field","Input","label","placeholder","disabled","loading","error","name","content","message","pointing","rules","required","defaultValue","type","password","minLength","value","authError","negative","Header","style","textAlign","marginTop","href","onClick","e","preventDefault","history","push","MessageContent","children","classes","cx","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","childrenUtils","isNil","handledProps","propTypes","MessageHeader","create","createShorthandFactory","val","MessageItem","defaultProps","MessageList","items","_map","Message","_Component","_getPrototypeOf2","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","_possibleConstructorReturn","_getPrototypeOf","call","apply","concat","_defineProperty","_assertThisInitialized","onDismiss","_inherits","_createClass","key","_this$props","attached","color","compact","floating","header","hidden","icon","info","list","positive","size","success","visible","warning","useKeyOnly","useKeyOrValueAndKey","dismissIcon","Icon","handleDismiss","autoGenerateKey","_isNil","createHTMLParagraph","Component"],"mappings":"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","file":"static/js/19.c8f117c5.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\n\n// react-hook-form\nimport { useForm, Controller } from \"react-hook-form\";\n\n// semantic ui react\nimport { Form, Input, Message } from \"semantic-ui-react\";\n\n// redux\nimport { connect } from \"react-redux\";\n\n// actions\nimport { signIn } from \"../../../redux/auth/actions\";\n\n// react-i18next\nimport { useTranslation } from \"react-i18next\";\n\n// history\nimport history from \"../../../utils/history\";\n\nconst SingIn = (props) => {\n  const { t } = useTranslation();\n\n  // form\n  const { handleSubmit, errors, control } = useForm();\n\n  const onSubmit = (data) => {\n    props.signIn({ userData: data });\n  };\n\n  const onConfirmationEmailClicked = (e) => {\n    e.preventDefault();\n    history.push(\"/dashboard/user/resendconfirmarionemail\");\n  };\n  const restorePassword = (e) => {\n    e.preventDefault();\n    history.push(\"/dashboard/user/restorepassword\");\n  };\n\n  return (\n    <div className=\"form-container\">\n      <h2>{t(\"modules.signin.tittle\", \"Sign In\")}</h2>\n      <div className=\"ui divider\"></div>\n\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <Controller\n          as={\n            <Form.Field\n              control={Input}\n              label={t(\n                \"modules.signin.form.label.username-email\",\n                \"Username or Email\"\n              )}\n              placeholder={t(\n                \"modules.signin.form.label.username-email\",\n                \"Username or Email\"\n              )}\n              disabled={props.user.loading}\n              error={\n                errors.name && {\n                  content: errors.name.message,\n                  pointing: \"below\",\n                }\n              }\n            />\n          }\n          name=\"username\"\n          control={control}\n          rules={{\n            required: t(\n              \"form.validationmessages.requiredfield\",\n              \"This field is required\"\n            ),\n          }}\n          defaultValue=\"\"\n        />\n        <Controller\n          as={\n            <Form.Field\n              control={Input}\n              label={t(\"modules.signin.form.label.password\", \"Password\")}\n              placeholder={t(\"modules.signin.form.label.password\", \"Password\")}\n              disabled={props.user.loading}\n              type=\"password\"\n              error={\n                errors.password && {\n                  content: errors.password.message,\n                  pointing: \"below\",\n                }\n              }\n            />\n          }\n          name=\"password\"\n          control={control}\n          rules={{\n            required: t(\n              \"form.validationmessages.requiredfield\",\n              \"This field is required\"\n            ),\n            minLength: { value: 8, message: \"Minlength is 8\" },\n          }}\n          defaultValue=\"\"\n        />\n\n        {props.user.authError && (\n          <Message negative>\n            <Message.Header>{props.user.authError}</Message.Header>\n          </Message>\n        )}\n\n        <div style={{ textAlign: \"center\" }}>\n          <button\n            className={`ui button positive ${\n              props.user.loading ? \"loading\" : \"\"\n            }`}\n            style={{ marginTop: \"6px\" }}\n            type=\"submit\"\n            disabled={props.user.loading}\n          >\n            {t(\"modules.signin.form.buttons.signin\", \"Sign In\")}\n          </button>\n        </div>\n        <p style={{ textAlign: \"center\" }}>\n          <a href=\"#\" style={{ marginTop: \"4px\" }} onClick={restorePassword}>\n            {t(\"modules.signin.form.label.forgotpassword\", \"Forgot password?\")}\n          </a>\n        </p>\n        <p style={{ textAlign: \"center\" }}>\n          <a\n            href=\"#\"\n            style={{ marginTop: \"4px\" }}\n            onClick={onConfirmationEmailClicked}\n          >\n            {t(\"modules.signin.form.label.resendemail\", \"Resend email\")}\n          </a>\n        </p>\n      </Form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signIn: (userData) => dispatch(signIn(userData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingIn);\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message can contain a content.\n */\n\nfunction MessageContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(MessageContent, props);\n  var ElementType = getElementType(MessageContent, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageContent.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default MessageContent;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message can contain a header.\n */\n\nfunction MessageHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('header', className);\n  var rest = getUnhandledProps(MessageHeader, props);\n  var ElementType = getElementType(MessageHeader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageHeader.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nMessageHeader.create = createShorthandFactory(MessageHeader, function (val) {\n  return {\n    content: val\n  };\n});\nexport default MessageHeader;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message list can contain an item.\n */\n\nfunction MessageItem(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(MessageItem, props);\n  var ElementType = getElementType(MessageItem, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageItem.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageItem.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nMessageItem.defaultProps = {\n  as: 'li'\n};\nMessageItem.create = createShorthandFactory(MessageItem, function (content) {\n  return {\n    content: content\n  };\n});\nexport default MessageItem;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport MessageItem from './MessageItem';\n/**\n * A message can contain a list of items.\n */\n\nfunction MessageList(props) {\n  var children = props.children,\n      className = props.className,\n      items = props.items;\n  var classes = cx('list', className);\n  var rest = getUnhandledProps(MessageList, props);\n  var ElementType = getElementType(MessageList, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? _map(items, MessageItem.create) : children);\n}\n\nMessageList.handledProps = [\"as\", \"children\", \"className\", \"items\"];\nMessageList.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand Message.Items. */\n  items: customPropTypes.collectionShorthand\n} : {};\nMessageList.defaultProps = {\n  as: 'ul'\n};\nMessageList.create = createShorthandFactory(MessageList, function (val) {\n  return {\n    items: val\n  };\n});\nexport default MessageList;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _isNil from \"lodash/isNil\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, createHTMLParagraph, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey } from '../../lib';\nimport Icon from '../../elements/Icon';\nimport MessageContent from './MessageContent';\nimport MessageHeader from './MessageHeader';\nimport MessageList from './MessageList';\nimport MessageItem from './MessageItem';\n/**\n * A message displays information that explains nearby content.\n * @see Form\n */\n\nvar Message =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Message, _Component);\n\n  function Message() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Message);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Message)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDismiss\", function (e) {\n      var onDismiss = _this.props.onDismiss;\n      if (onDismiss) onDismiss(e, _this.props);\n    });\n\n    return _this;\n  }\n\n  _createClass(Message, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          attached = _this$props.attached,\n          children = _this$props.children,\n          className = _this$props.className,\n          color = _this$props.color,\n          compact = _this$props.compact,\n          content = _this$props.content,\n          error = _this$props.error,\n          floating = _this$props.floating,\n          header = _this$props.header,\n          hidden = _this$props.hidden,\n          icon = _this$props.icon,\n          info = _this$props.info,\n          list = _this$props.list,\n          negative = _this$props.negative,\n          onDismiss = _this$props.onDismiss,\n          positive = _this$props.positive,\n          size = _this$props.size,\n          success = _this$props.success,\n          visible = _this$props.visible,\n          warning = _this$props.warning;\n      var classes = cx('ui', color, size, useKeyOnly(compact, 'compact'), useKeyOnly(error, 'error'), useKeyOnly(floating, 'floating'), useKeyOnly(hidden, 'hidden'), useKeyOnly(icon, 'icon'), useKeyOnly(info, 'info'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(success, 'success'), useKeyOnly(visible, 'visible'), useKeyOnly(warning, 'warning'), useKeyOrValueAndKey(attached, 'attached'), 'message', className);\n      var dismissIcon = onDismiss && React.createElement(Icon, {\n        name: \"close\",\n        onClick: this.handleDismiss\n      });\n      var rest = getUnhandledProps(Message, this.props);\n      var ElementType = getElementType(Message, this.props);\n\n      if (!childrenUtils.isNil(children)) {\n        return React.createElement(ElementType, _extends({}, rest, {\n          className: classes\n        }), dismissIcon, children);\n      }\n\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes\n      }), dismissIcon, Icon.create(icon, {\n        autoGenerateKey: false\n      }), (!_isNil(header) || !_isNil(content) || !_isNil(list)) && React.createElement(MessageContent, null, MessageHeader.create(header, {\n        autoGenerateKey: false\n      }), MessageList.create(list, {\n        autoGenerateKey: false\n      }), createHTMLParagraph(content, {\n        autoGenerateKey: false\n      })));\n    }\n  }]);\n\n  return Message;\n}(Component);\n\n_defineProperty(Message, \"Content\", MessageContent);\n\n_defineProperty(Message, \"Header\", MessageHeader);\n\n_defineProperty(Message, \"List\", MessageList);\n\n_defineProperty(Message, \"Item\", MessageItem);\n\n_defineProperty(Message, \"handledProps\", [\"as\", \"attached\", \"children\", \"className\", \"color\", \"compact\", \"content\", \"error\", \"floating\", \"header\", \"hidden\", \"icon\", \"info\", \"list\", \"negative\", \"onDismiss\", \"positive\", \"size\", \"success\", \"visible\", \"warning\"]);\n\nexport { Message as default };\nMessage.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A message can be formatted to attach itself to other content. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['bottom', 'top'])]),\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A message can be formatted to be different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A message can only take up the width of its content. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A message may be formatted to display a negative message. Same as `negative`. */\n  error: PropTypes.bool,\n\n  /** A message can float above content that it is related to. */\n  floating: PropTypes.bool,\n\n  /** Shorthand for MessageHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** A message can be hidden. */\n  hidden: PropTypes.bool,\n\n  /** A message can contain an icon. */\n  icon: PropTypes.oneOfType([customPropTypes.itemShorthand, PropTypes.bool]),\n\n  /** A message may be formatted to display information. */\n  info: PropTypes.bool,\n\n  /** Array shorthand items for the MessageList. Mutually exclusive with children. */\n  list: customPropTypes.collectionShorthand,\n\n  /** A message may be formatted to display a negative message. Same as `error`. */\n  negative: PropTypes.bool,\n\n  /**\n   * A message that the user can choose to hide.\n   * Called when the user clicks the \"x\" icon. This also adds the \"x\" icon.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onDismiss: PropTypes.func,\n\n  /** A message may be formatted to display a positive message.  Same as `success`. */\n  positive: PropTypes.bool,\n\n  /** A message can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** A message may be formatted to display a positive message.  Same as `positive`. */\n  success: PropTypes.bool,\n\n  /** A message can be set to visible to force itself to be shown. */\n  visible: PropTypes.bool,\n\n  /** A message may be formatted to display warning messages. */\n  warning: PropTypes.bool\n} : {};"],"sourceRoot":""}