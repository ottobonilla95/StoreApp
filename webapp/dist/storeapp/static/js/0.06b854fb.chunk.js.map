{"version":3,"sources":["../node_modules/react-hook-form/dist/react-hook-form.es.js"],"names":["VALIDATION_MODE","EVENTS","INPUT_VALIDATION_RULES","REGEX_IS_DEEP_PROP","REGEX_IS_PLAIN_PROP","REGEX_PROP_NAME","REGEX_ESCAPE_CHAR","attachEventListeners","field","handleChange","isRadioOrCheckbox","ref","addEventListener","isUndefined","val","undefined","isNullOrUndefined","value","isArray","Array","isObjectType","isObject","set","object","path","index","tempPath","test","isKey","string","result","replace","match","number","quote","push","stringToPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","Object","entries","reduce","previous","assign","removeAllEventListeners","validateWithStateUpdate","removeEventListener","isRadioInput","type","isCheckBoxInput","isDetached","element","HTMLElement","nodeType","Node","DOCUMENT_NODE","parentNode","findRemovedFieldAndRemoveListener","fields","forceDelete","name","mutationWatcher","fieldValue","options","forEach","disconnect","splice","defaultReturn","isValid","getRadioValue","checked","isFileInput","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","values","filter","map","attributes","getFieldValue","files","selected","getMultipleSelectValue","getFieldsValues","isEmptyObject","keys","isSameError","error","message","get","obj","defaultValue","split","Boolean","shouldUpdateWithError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isManual","isRegex","RegExp","getValueAndMessage","validationData","isPureObject","isString","isFunction","isBoolean","getValidateError","isStringValue","appendErrors","validateAllFieldCriteria","types","validateField","fieldsRef","a","async","valueAsNumber","valueAsDate","required","maxLength","minLength","min","max","pattern","validate","current","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","maxValue","maxMessage","minValue","minMessage","valueNumber","parseFloat","exceedMin","valueDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","validateRef","validateError","validateFunctions","Promise","resolve","validateResult","validationResult","parseErrorSchema","inner","validateWithSchema","validationSchema","abortEarly","getDefaultValue","defaultValues","getPath","getInnerPath","pathWithIndex","isPrimitive","getPath$1","parentPath","flatArray","list","b","concat","assignWatchFields","fieldValues","fieldName","watchFields","combinedDefaultValues","add","skipValidation","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","getIsFieldsDifferent","referenceArray","differenceArray","isMatch","i","dataA","dataB","isMatchFieldArrayName","searchName","startsWith","isNameInFieldArray","names","prev","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","__rest","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","propertyIsEnumerable","omitObject","_a","unset","target","paths","unsetObject","isArrayObject","modeChecker","mode","isOnChange","useRef","React","useState","useCallback","useEffect","useForm","reValidateMode","submitFocusError","validateCriteriaMode","errorsRef","touchedFieldsRef","watchFieldsRef","Set","dirtyFieldsRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultRenderValuesRef","defaultValuesRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","fieldArrayNamesRef","render","isWindowUndefined","isWeb","isProxyEnabled","readFormStateRef","dirty","submitCount","touched","isSubmitting","reRender","validateFieldCurry","validateFieldsSchemaCurry","renderBaseOnError","shouldRender","skipReRender","shouldReRender","delete","setFieldValue","rawValue","radioRef","FileList","selectRef","includes","checkboxRef","setDirty","isFieldArray","isDirty","fieldArrayName","substring","isDirtyChanged","size","setInternalValue","executeValidation","executeSchemaValidation","payload","previousFormIsValid","triggerValidation","all","every","setValue","shouldValidate","currentError","shouldSkipValidation","shouldUpdateDirty","shouldUpdateState","validForm","validateSchemaIsValid","then","resetFieldRef","removeEventListenerAndRef","clearError","setInternalError","preventRender","setError","watch","fieldNames","nest","unregister","registerFieldsRef","validateOptions","console","warn","fieldAttributes","currentField","isEmptyDefaultValue","find","fieldToAttachListener","register","refOrValidationOptions","validationOptions","handleSubmit","callback","preventDefault","persist","fieldErrors","resolvedPrevious","fieldError","focus","resetRefs","reset","closest","resetFieldArray","getValues","outputValues","formState","control","Proxy","prop","FormGlobalContext","createContext","useFormContext","useContext","Controller","rules","InnerComponent","as","onChange","onChangeName","onBlurName","valueName","rest","methods","useState$1","setInputStateValue","valueRef","useRef$1","isCheckboxInput","commonTask","isCheckbox","getInputValue","registerField","defineProperty","useEffect$1","fieldArrayNames","event","props","arg","isValidElement","cloneElement","createElement"],"mappings":"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","file":"static/js/0.06b854fb.chunk.js","sourcesContent":["import * as React from 'react';\nimport { createContext, useContext, createElement, useMemo, useState as useState$1, useEffect as useEffect$1, useRef as useRef$1, isValidElement, cloneElement, Fragment } from 'react';\n\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n};\r\nconst RADIO_INPUT = 'radio';\r\nconst FILE_INPUT = 'file';\r\nconst VALUE = 'value';\r\nconst UNDEFINED = 'undefined';\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\r\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\r\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\r\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\n\nfunction attachEventListeners({ field, handleChange, isRadioOrCheckbox, }) {\r\n    const { ref } = field;\r\n    if (ref.addEventListener) {\r\n        ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isUndefined = (val) => val === undefined;\n\nvar isNullOrUndefined = (value) => value === null || isUndefined(value);\n\nvar isArray = (value) => Array.isArray(value);\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nconst isKey = (value) => !isArray(value) &&\r\n    (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\r\nconst stringToPath = (string) => {\r\n    const result = [];\r\n    string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\r\n        result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\r\n    });\r\n    return result;\r\n};\r\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data) => Object.entries(data).reduce((previous, [key, value]) => {\r\n    if (REGEX_IS_DEEP_PROP.test(key)) {\r\n        set(previous, key, value);\r\n        return previous;\r\n    }\r\n    return Object.assign(Object.assign({}, previous), { [key]: value });\r\n}, {});\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nvar isRadioInput = (type) => type === RADIO_INPUT;\n\nvar isCheckBoxInput = (type) => type === 'checkbox';\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\r\n    if (!field) {\r\n        return;\r\n    }\r\n    const { ref, ref: { name, type }, mutationWatcher, } = field;\r\n    if (!type) {\r\n        return;\r\n    }\r\n    const fieldValue = fields[name];\r\n    if ((isRadioInput(type) || isCheckBoxInput(type)) && fieldValue) {\r\n        const { options } = fieldValue;\r\n        if (isArray(options) && options.length) {\r\n            options.forEach(({ ref }, index) => {\r\n                if ((ref && isDetached(ref)) || forceDelete) {\r\n                    const mutationWatcher = ref.mutationWatcher;\r\n                    removeAllEventListeners(ref, handleChange);\r\n                    if (mutationWatcher) {\r\n                        mutationWatcher.disconnect();\r\n                    }\r\n                    options.splice(index, 1);\r\n                }\r\n            });\r\n            if (options && !options.length) {\r\n                delete fields[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fields[name];\r\n        }\r\n    }\r\n    else if (isDetached(ref) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        if (mutationWatcher) {\r\n            mutationWatcher.disconnect();\r\n        }\r\n        delete fields[name];\r\n    }\r\n}\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => isArray(options)\r\n    ? options.reduce((previous, { ref: { checked, value } }) => checked\r\n        ? {\r\n            isValid: true,\r\n            value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isFileInput = (type) => type === FILE_INPUT;\n\nvar isMultipleSelect = (type) => type === 'select-multiple';\n\nvar isEmptyString = (value) => value === '';\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter(({ ref: { checked } }) => checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || isEmptyString(value)\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fields, ref) {\r\n    const { type, name, options, value, files } = ref;\r\n    const field = fields[name];\r\n    if (isFileInput(type)) {\r\n        return files;\r\n    }\r\n    if (isRadioInput(type)) {\r\n        return field ? getRadioValue(field.options).value : '';\r\n    }\r\n    if (isMultipleSelect(type)) {\r\n        return getMultipleSelectValue(options);\r\n    }\r\n    if (isCheckBoxInput(type)) {\r\n        return field ? getCheckboxValue(field.options).value : false;\r\n    }\r\n    return value;\r\n}\n\nvar getFieldsValues = (fields) => Object.values(fields).reduce((previous, { ref, ref: { name } }) => (Object.assign(Object.assign({}, previous), { [name]: getFieldValue(fields, ref) })), {});\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isSameError = (error, type, message) => isObject(error) && error.type === type && error.message === message;\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = path\r\n        .split(/[,[\\].]+?/)\r\n        .filter(Boolean)\r\n        .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? obj[path] || defaultValue\r\n        : result;\r\n};\n\nfunction shouldUpdateWithError({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isFieldValid = isEmptyObject(error);\r\n    const isFormValid = isEmptyObject(errors);\r\n    const currentFieldError = get(error, name);\r\n    const existFieldError = get(errors, name);\r\n    if ((isFieldValid && validFields.has(name)) ||\r\n        (existFieldError && existFieldError.isManual)) {\r\n        return false;\r\n    }\r\n    if (isFormValid !== isFieldValid ||\r\n        (!isFormValid && !existFieldError) ||\r\n        (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {\r\n        return true;\r\n    }\r\n    return (currentFieldError &&\r\n        !isSameError(existFieldError, currentFieldError.type, currentFieldError.message));\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => {\r\n    const isPureObject = isObject(validationData) && !isRegex(validationData);\r\n    return {\r\n        value: isPureObject\r\n            ? validationData.value\r\n            : validationData,\r\n        message: isPureObject\r\n            ? validationData.message\r\n            : '',\r\n    };\r\n};\n\nvar isString = (value) => typeof value === 'string';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    const isStringValue = isString(result);\r\n    if (isStringValue || (isBoolean(result) && !result)) {\r\n        const message = isStringValue ? result : '';\r\n        return {\r\n            type,\r\n            message,\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (!validateAllFieldCriteria) {\r\n        return {};\r\n    }\r\n    const error = errors[name];\r\n    return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name, valueAsNumber, valueAsDate }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {\r\n    const fields = fieldsRef.current;\r\n    const error = {};\r\n    const isRadio = isRadioInput(type);\r\n    const isCheckBox = isCheckBoxInput(type);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = isEmptyString(value);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const message = isString(required)\r\n            ? required\r\n            : getValueAndMessage(required).message;\r\n        error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message, ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\r\n        const { value: minValue, message: minMessage } = getValueAndMessage(min);\r\n        if (type === 'number' || (!type && !isNaN(value))) {\r\n            const valueNumber = valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxValue)) {\r\n                exceedMax = valueNumber > maxValue;\r\n            }\r\n            if (!isNullOrUndefined(minValue)) {\r\n                exceedMin = valueNumber < minValue;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = valueAsDate || new Date(value);\r\n            if (isString(maxValue)) {\r\n                exceedMax = valueDate > new Date(maxValue);\r\n            }\r\n            if (isString(minValue)) {\r\n                exceedMin = valueDate < new Date(minValue);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);\r\n        const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);\r\n        const inputLength = value.toString().length;\r\n        const exceedMax = maxLength && inputLength > maxLengthValue;\r\n        const exceedMin = minLength && inputLength < minLengthValue;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fields, ref);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            const validateFunctions = Object.entries(validate);\r\n            const validationResult = await new Promise((resolve) => {\r\n                validateFunctions.reduce(async (previous, [key, validate], index) => {\r\n                    if ((!isEmptyObject(await previous) && !validateAllFieldCriteria) ||\r\n                        !isFunction(validate)) {\r\n                        return resolve(previous);\r\n                    }\r\n                    let result;\r\n                    const validateResult = await validate(fieldValue);\r\n                    const validateError = getValidateError(validateResult, validateRef, key);\r\n                    if (validateError) {\r\n                        result = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                        if (validateAllFieldCriteria) {\r\n                            error[name] = result;\r\n                        }\r\n                    }\r\n                    else {\r\n                        result = previous;\r\n                    }\r\n                    return validateFunctions.length - 1 === index\r\n                        ? resolve(result)\r\n                        : result;\r\n                }, {});\r\n            });\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)\r\n    ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (previous[path] && validateAllFieldCriteria\r\n        ? {\r\n            [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),\r\n        }\r\n        : {\r\n            [path]: previous[path] || Object.assign({ message,\r\n                type }, (validateAllFieldCriteria\r\n                ? {\r\n                    types: { [type]: message || true },\r\n                }\r\n                : {})),\r\n        }))), {})\r\n    : {\r\n        [error.path]: { message: error.message, type: error.type },\r\n    };\r\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data) {\r\n    try {\r\n        return {\r\n            values: await validationSchema.validate(data, { abortEarly: false }),\r\n            errors: {},\r\n        };\r\n    }\r\n    catch (e) {\r\n        return {\r\n            values: {},\r\n            errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),\r\n        };\r\n    }\r\n}\n\nvar getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name])\r\n    ? get(defaultValues, name, defaultValue)\r\n    : defaultValues[name];\n\nfunction flatArray(list) {\r\n    return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\r\n    const getInnerPath = (value, key, isObject) => {\r\n        const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\r\n        return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\r\n    };\r\n    return isArray(values)\r\n        ? values.map((value, key) => getInnerPath(value, key))\r\n        : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\r\n};\r\nvar getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues) => {\r\n    let value;\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = undefined;\r\n    }\r\n    else if (!isUndefined(fieldValues[fieldName])) {\r\n        watchFields.add(fieldName);\r\n        value = fieldValues[fieldName];\r\n    }\r\n    else {\r\n        value = get(transformToNestObject(fieldValues), fieldName);\r\n        if (!isUndefined(value)) {\r\n            getPath$1(fieldName, value).forEach(name => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isObject(combinedDefaultValues)\r\n            ? getDefaultValue(combinedDefaultValues, fieldName)\r\n            : combinedDefaultValues\r\n        : value;\r\n};\n\nvar skipValidation = ({ hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnSubmit && isReValidateOnSubmit) ||\r\n    (isOnSubmit && !isSubmitted) ||\r\n    (isOnBlur && !isBlurEvent && !hasError) ||\r\n    (isReValidateOnBlur && !isBlurEvent && hasError) ||\r\n    (isReValidateOnSubmit && isSubmitted);\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\r\n    let isMatch = false;\r\n    if (!isArray(referenceArray) ||\r\n        !isArray(differenceArray) ||\r\n        referenceArray.length !== differenceArray.length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < referenceArray.length; i++) {\r\n        if (isMatch) {\r\n            break;\r\n        }\r\n        const dataA = referenceArray[i];\r\n        const dataB = differenceArray[i];\r\n        if (!dataB || Object.keys(dataA).length !== Object.keys(dataB).length) {\r\n            isMatch = true;\r\n            break;\r\n        }\r\n        for (const key in dataA) {\r\n            if (!dataB[key] || dataA[key] !== dataB[key]) {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return isMatch;\r\n}\n\nconst isMatchFieldArrayName = (name, searchName) => name.startsWith(`${searchName}[`);\r\nvar isNameInFieldArray = (names, name) => [...names].reduce((prev, current) => (isMatchFieldArrayName(name, current) ? true : prev), false);\n\nfunction onDomRemove(element, onDetachCallback) {\r\n    const observer = new MutationObserver(() => {\r\n        if (isDetached(element)) {\r\n            observer.disconnect();\r\n            onDetachCallback();\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst omitObject = (obj, key) => {\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const _a = key, omitted = obj[_a], rest = __rest(obj, [typeof _a === \"symbol\" ? _a : _a + \"\"]);\r\n    return rest;\r\n};\n\nconst unsetObject = (target) => {\r\n    for (const key in target) {\r\n        const data = target[key];\r\n        const isArrayObject = isArray(data);\r\n        if ((isObject(data) || isArrayObject) && !data.ref) {\r\n            unsetObject(data);\r\n        }\r\n        if (isUndefined(data) ||\r\n            isEmptyObject(data) ||\r\n            (isArrayObject && !target[key].filter(Boolean).length)) {\r\n            delete target[key];\r\n        }\r\n    }\r\n    return target;\r\n};\r\nconst unset = (target, paths) => {\r\n    paths.forEach(path => {\r\n        set(target, path, undefined);\r\n    });\r\n    return unsetObject(target);\r\n};\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n});\n\nconst { useRef, useState, useCallback, useEffect } = React;\r\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const validateAllFieldCriteria = validateCriteriaMode === 'all';\r\n    const errorsRef = useRef({});\r\n    const touchedFieldsRef = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const dirtyFieldsRef = useRef(new Set());\r\n    const fieldsWithValidationRef = useRef(new Set());\r\n    const validFieldsRef = useRef(new Set());\r\n    const isValidRef = useRef(true);\r\n    const defaultRenderValuesRef = useRef({});\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const isSubmittedRef = useRef(false);\r\n    const isDirtyRef = useRef(false);\r\n    const submitCountRef = useRef(0);\r\n    const isSubmittingRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const [, render] = useState();\r\n    const { isOnBlur, isOnSubmit } = useRef(modeChecker(mode)).current;\r\n    const isWindowUndefined = typeof window === UNDEFINED;\r\n    const isWeb = typeof document !== UNDEFINED &&\r\n        !isWindowUndefined &&\r\n        !isUndefined(window.HTMLElement);\r\n    const isProxyEnabled = isWeb && 'Proxy' in window;\r\n    const readFormStateRef = useRef({\r\n        dirty: !isProxyEnabled,\r\n        isSubmitted: isOnSubmit,\r\n        submitCount: !isProxyEnabled,\r\n        touched: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;\r\n    defaultValuesRef.current = defaultValuesRef.current\r\n        ? defaultValuesRef.current\r\n        : defaultValues;\r\n    const reRender = useCallback(() => {\r\n        if (!isUnMount.current) {\r\n            render({});\r\n        }\r\n    }, []);\r\n    const validateFieldCurry = useCallback(validateField.bind(null, fieldsRef, validateAllFieldCriteria), []);\r\n    const validateFieldsSchemaCurry = useCallback(validateWithSchema.bind(null, validationSchema, validateAllFieldCriteria), [validationSchema]);\r\n    const renderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\r\n        let shouldReRender = shouldRender ||\r\n            shouldUpdateWithError({\r\n                errors: errorsRef.current,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        if (isEmptyObject(error)) {\r\n            if (fieldsWithValidationRef.current.has(name) || validationSchema) {\r\n                validFieldsRef.current.add(name);\r\n                shouldReRender = shouldReRender || get(errorsRef.current, name);\r\n            }\r\n            errorsRef.current = unset(errorsRef.current, [name]);\r\n        }\r\n        else {\r\n            validFieldsRef.current.delete(name);\r\n            shouldReRender = shouldReRender || !get(errorsRef.current, name);\r\n            set(errorsRef.current, name, error[name]);\r\n        }\r\n        if (shouldReRender && !skipReRender) {\r\n            reRender();\r\n            return true;\r\n        }\r\n    }, [reRender, validationSchema]);\r\n    const setFieldValue = useCallback((name, rawValue) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        const ref = field.ref;\r\n        const { type } = ref;\r\n        const options = field.options;\r\n        const value = isWeb &&\r\n            ref instanceof window.HTMLElement &&\r\n            isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(type) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(type)) {\r\n            if (value instanceof FileList || value === '') {\r\n                ref.files = value;\r\n            }\r\n            else {\r\n                ref.value = value;\r\n            }\r\n        }\r\n        else if (isMultipleSelect(type)) {\r\n            [...ref.options].forEach(selectRef => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(type) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n        return type;\r\n    }, [isWeb]);\r\n    const setDirty = (name) => {\r\n        if (!fieldsRef.current[name] || !readFormStateRef.current.dirty) {\r\n            return false;\r\n        }\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        let isDirty = defaultRenderValuesRef.current[name] !==\r\n            getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\r\n        if (isFieldArray) {\r\n            const fieldArrayName = name.substring(0, name.indexOf('['));\r\n            isDirty = getIsFieldsDifferent(transformToNestObject(getFieldsValues(fieldsRef.current))[fieldArrayName], get(defaultValuesRef.current, fieldArrayName));\r\n        }\r\n        const isDirtyChanged = isFieldArray\r\n            ? isDirtyRef.current !== isDirty\r\n            : dirtyFieldsRef.current.has(name) !== isDirty;\r\n        if (isDirty) {\r\n            dirtyFieldsRef.current.add(name);\r\n        }\r\n        else {\r\n            dirtyFieldsRef.current.delete(name);\r\n        }\r\n        isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;\r\n        return isDirtyChanged;\r\n    };\r\n    const setInternalValue = useCallback((name, value) => {\r\n        setFieldValue(name, value);\r\n        if (setDirty(name) ||\r\n            (!get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched)) {\r\n            return !!set(touchedFieldsRef.current, name, true);\r\n        }\r\n    }, [setFieldValue]);\r\n    const executeValidation = useCallback(async (name, shouldRender, skipReRender) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        if (shouldRender) {\r\n            reRender();\r\n        }\r\n        const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n        renderBaseOnError(name, error, false, skipReRender);\r\n        return isEmptyObject(error);\r\n    }, [reRender, renderBaseOnError, validateAllFieldCriteria]);\r\n    const executeSchemaValidation = useCallback(async (payload, shouldRender) => {\r\n        const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(getFieldsValues(fieldsRef.current)));\r\n        const previousFormIsValid = isValidRef.current;\r\n        isValidRef.current = isEmptyObject(errors);\r\n        if (isArray(payload)) {\r\n            payload.forEach(name => {\r\n                if (errors[name]) {\r\n                    set(errorsRef.current, name, errors[name]);\r\n                }\r\n                else {\r\n                    unset(errorsRef.current, [name]);\r\n                }\r\n            });\r\n            reRender();\r\n        }\r\n        else {\r\n            const fieldName = payload;\r\n            const error = (get(errors, fieldName)\r\n                ? { [fieldName]: get(errors, fieldName) }\r\n                : {});\r\n            renderBaseOnError(fieldName, error, shouldRender || previousFormIsValid !== isValidRef.current);\r\n        }\r\n        return isEmptyObject(errorsRef.current);\r\n    }, [reRender, renderBaseOnError, validateAllFieldCriteria, validationSchema]);\r\n    const triggerValidation = useCallback(async (payload, shouldRender) => {\r\n        const fields = payload || Object.keys(fieldsRef.current);\r\n        if (validationSchema) {\r\n            return executeSchemaValidation(fields, shouldRender);\r\n        }\r\n        if (isArray(fields)) {\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, false, true)));\r\n            reRender();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields, shouldRender);\r\n    }, [executeSchemaValidation, executeValidation, reRender, validationSchema]);\r\n    const setValue = useCallback((name, value, shouldValidate) => {\r\n        const shouldRender = setInternalValue(name, value) ||\r\n            isWatchAllRef.current ||\r\n            watchFieldsRef.current.has(name);\r\n        if (shouldValidate) {\r\n            return triggerValidation(name, shouldRender);\r\n        }\r\n        if (shouldRender) {\r\n            reRender();\r\n        }\r\n        return;\r\n    }, [reRender, setInternalValue, triggerValidation]);\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            const name = target ? target.name : '';\r\n            const fields = fieldsRef.current;\r\n            const errors = errorsRef.current;\r\n            const field = fields[name];\r\n            const currentError = get(errors, name);\r\n            let error;\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const isBlurEvent = type === EVENTS.BLUR;\r\n            const shouldSkipValidation = skipValidation({\r\n                hasError: !!currentError,\r\n                isBlurEvent,\r\n                isOnSubmit,\r\n                isReValidateOnSubmit,\r\n                isOnBlur,\r\n                isReValidateOnBlur,\r\n                isSubmitted: isSubmittedRef.current,\r\n            });\r\n            const shouldUpdateDirty = setDirty(name);\r\n            let shouldUpdateState = isWatchAllRef.current ||\r\n                watchFieldsRef.current.has(name) ||\r\n                shouldUpdateDirty;\r\n            if (isBlurEvent &&\r\n                !get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                shouldUpdateState = true;\r\n            }\r\n            if (shouldSkipValidation) {\r\n                return shouldUpdateState && reRender();\r\n            }\r\n            if (validationSchema) {\r\n                const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(getFieldsValues(fields)));\r\n                const validForm = isEmptyObject(errors);\r\n                error = (get(errors, name)\r\n                    ? { [name]: get(errors, name) }\r\n                    : {});\r\n                if (isValidRef.current !== validForm) {\r\n                    shouldUpdateState = true;\r\n                }\r\n                isValidRef.current = validForm;\r\n            }\r\n            else {\r\n                error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            }\r\n            if (!renderBaseOnError(name, error) && shouldUpdateState) {\r\n                reRender();\r\n            }\r\n        };\r\n    const validateSchemaIsValid = useCallback(() => {\r\n        const fieldValues = isEmptyObject(defaultValuesRef.current)\r\n            ? getFieldsValues(fieldsRef.current)\r\n            : defaultValuesRef.current;\r\n        validateFieldsSchemaCurry(transformToNestObject(fieldValues)).then(({ errors }) => {\r\n            const previousFormIsValid = isValidRef.current;\r\n            isValidRef.current = isEmptyObject(errors);\r\n            if (previousFormIsValid && previousFormIsValid !== isValidRef.current) {\r\n                reRender();\r\n            }\r\n        });\r\n    }, [reRender, validateFieldsSchemaCurry]);\r\n    const resetFieldRef = useCallback((name) => {\r\n        errorsRef.current = unset(errorsRef.current, [name]);\r\n        touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\r\n        fieldsRef.current = omitObject(fieldsRef.current, name);\r\n        defaultRenderValuesRef.current = omitObject(defaultRenderValuesRef.current, name);\r\n        [\r\n            dirtyFieldsRef,\r\n            fieldsWithValidationRef,\r\n            validFieldsRef,\r\n            watchFieldsRef,\r\n        ].forEach(data => data.current.delete(name));\r\n        if (readFormStateRef.current.isValid ||\r\n            readFormStateRef.current.touched) {\r\n            reRender();\r\n        }\r\n        if (validationSchema) {\r\n            validateSchemaIsValid();\r\n        }\r\n    }, [reRender]);\r\n    const removeEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (!field) {\r\n            return;\r\n        }\r\n        if (!isUndefined(handleChangeRef.current)) {\r\n            findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\r\n        }\r\n        resetFieldRef(field.ref.name);\r\n    }, [resetFieldRef]);\r\n    function clearError(name) {\r\n        if (isUndefined(name)) {\r\n            errorsRef.current = {};\r\n        }\r\n        else {\r\n            unset(errorsRef.current, isArray(name) ? name : [name]);\r\n        }\r\n        reRender();\r\n    }\r\n    const setInternalError = ({ name, type, types, message, preventRender, }) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!isSameError(errorsRef.current[name], type, message)) {\r\n            set(errorsRef.current, name, {\r\n                type,\r\n                types,\r\n                message,\r\n                ref: field ? field.ref : {},\r\n                isManual: true,\r\n            });\r\n            if (!preventRender) {\r\n                reRender();\r\n            }\r\n        }\r\n    };\r\n    function setError(name, type = '', message) {\r\n        if (isString(name)) {\r\n            setInternalError(Object.assign({ name }, (isObject(type)\r\n                ? {\r\n                    types: type,\r\n                    type: '',\r\n                }\r\n                : {\r\n                    type,\r\n                    message,\r\n                })));\r\n        }\r\n        else if (isArray(name)) {\r\n            name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), { preventRender: true })));\r\n            reRender();\r\n        }\r\n    }\r\n    function watch(fieldNames, defaultValue) {\r\n        const combinedDefaultValues = isUndefined(defaultValue)\r\n            ? isUndefined(defaultValuesRef.current)\r\n                ? {}\r\n                : defaultValuesRef.current\r\n            : defaultValue;\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const watchFields = watchFieldsRef.current;\r\n        if (isProxyEnabled) {\r\n            readFormStateRef.current.dirty = true;\r\n        }\r\n        if (isString(fieldNames)) {\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues);\r\n        }\r\n        if (isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => {\r\n                let value;\r\n                if (isEmptyObject(fieldsRef.current) &&\r\n                    isObject(combinedDefaultValues)) {\r\n                    value = getDefaultValue(combinedDefaultValues, name);\r\n                }\r\n                else {\r\n                    value = assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues);\r\n                }\r\n                return Object.assign(Object.assign({}, previous), { [name]: value });\r\n            }, {});\r\n        }\r\n        isWatchAllRef.current = true;\r\n        const result = (!isEmptyObject(fieldValues) && fieldValues) ||\r\n            defaultValue ||\r\n            defaultValuesRef.current;\r\n        return fieldNames && fieldNames.nest\r\n            ? transformToNestObject(result)\r\n            : result;\r\n    }\r\n    function unregister(names) {\r\n        if (!isEmptyObject(fieldsRef.current)) {\r\n            (isArray(names) ? names : [names]).forEach(fieldName => removeEventListenerAndRef(fieldsRef.current[fieldName], true));\r\n        }\r\n    }\r\n    function registerFieldsRef(ref, validateOptions = {}) {\r\n        if (!ref.name) {\r\n            return console.warn('Missing name @', ref);\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldAttributes = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioInput(type) || isCheckBoxInput(type);\r\n        let currentField = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let isFieldArray = false;\r\n        let defaultValue;\r\n        if (isRadioOrCheckbox\r\n            ? currentField &&\r\n                isArray(currentField.options) &&\r\n                currentField.options.find(({ ref }) => value === ref.value)\r\n            : currentField) {\r\n            fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            const mutationWatcher = onDomRemove(ref, () => removeEventListenerAndRef(fieldAttributes));\r\n            if (isRadioOrCheckbox) {\r\n                currentField = Object.assign({ options: [\r\n                        ...((currentField && currentField.options) || []),\r\n                        {\r\n                            ref,\r\n                            mutationWatcher,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions);\r\n            }\r\n            else {\r\n                currentField = Object.assign(Object.assign({}, fieldAttributes), { mutationWatcher });\r\n            }\r\n        }\r\n        else {\r\n            currentField = fieldAttributes;\r\n        }\r\n        fields[name] = currentField;\r\n        if (!isEmptyObject(defaultValuesRef.current)) {\r\n            defaultValue = getDefaultValue(defaultValuesRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(name, defaultValue);\r\n            }\r\n        }\r\n        if (validationSchema && readFormStateRef.current.isValid) {\r\n            validateSchemaIsValid();\r\n        }\r\n        else if (!isEmptyObject(validateOptions)) {\r\n            fieldsWithValidationRef.current.add(name);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateFieldCurry(currentField).then(error => {\r\n                    const previousFormIsValid = isValidRef.current;\r\n                    if (isEmptyObject(error)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    else {\r\n                        isValidRef.current = false;\r\n                    }\r\n                    if (previousFormIsValid !== isValidRef.current) {\r\n                        reRender();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultRenderValuesRef.current[name] &&\r\n            !(isFieldArray && isEmptyDefaultValue)) {\r\n            defaultRenderValuesRef.current[name] = isEmptyDefaultValue\r\n                ? getFieldValue(fields, currentField.ref)\r\n                : defaultValue;\r\n        }\r\n        if (!type) {\r\n            return;\r\n        }\r\n        const fieldToAttachListener = isRadioOrCheckbox && currentField.options\r\n            ? currentField.options[currentField.options.length - 1]\r\n            : currentField;\r\n        attachEventListeners({\r\n            field: fieldToAttachListener,\r\n            isRadioOrCheckbox,\r\n            handleChange: handleChangeRef.current,\r\n        });\r\n    }\r\n    function register(refOrValidationOptions, validationOptions) {\r\n        if (isWindowUndefined || !refOrValidationOptions) {\r\n            return;\r\n        }\r\n        if (isString(refOrValidationOptions)) {\r\n            registerFieldsRef({ name: refOrValidationOptions }, validationOptions);\r\n            return;\r\n        }\r\n        if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\r\n            registerFieldsRef(refOrValidationOptions, validationOptions);\r\n            return;\r\n        }\r\n        return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);\r\n    }\r\n    const handleSubmit = useCallback((callback) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors;\r\n        let fieldValues;\r\n        const fields = fieldsRef.current;\r\n        if (readFormStateRef.current.isSubmitting) {\r\n            isSubmittingRef.current = true;\r\n            reRender();\r\n        }\r\n        try {\r\n            if (validationSchema) {\r\n                fieldValues = getFieldsValues(fields);\r\n                const { errors, values } = await validateFieldsSchemaCurry(transformToNestObject(fieldValues));\r\n                errorsRef.current = errors;\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                const { errors, values, } = await Object.values(fields).reduce(async (previous, field) => {\r\n                    if (!field) {\r\n                        return previous;\r\n                    }\r\n                    const resolvedPrevious = await previous;\r\n                    const { ref, ref: { name }, } = field;\r\n                    if (!fields[name]) {\r\n                        return Promise.resolve(resolvedPrevious);\r\n                    }\r\n                    const fieldError = await validateFieldCurry(field);\r\n                    if (fieldError[name]) {\r\n                        set(resolvedPrevious.errors, name, fieldError[name]);\r\n                        validFieldsRef.current.delete(name);\r\n                        return Promise.resolve(resolvedPrevious);\r\n                    }\r\n                    if (fieldsWithValidationRef.current.has(name)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    resolvedPrevious.values[name] = getFieldValue(fields, ref);\r\n                    return Promise.resolve(resolvedPrevious);\r\n                }, Promise.resolve({\r\n                    errors: {},\r\n                    values: {},\r\n                }));\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            if (isEmptyObject(fieldErrors)) {\r\n                errorsRef.current = {};\r\n                await callback(transformToNestObject(fieldValues), e);\r\n            }\r\n            else {\r\n                if (submitFocusError) {\r\n                    for (const key in fieldsRef.current) {\r\n                        if (get(fieldErrors, key)) {\r\n                            const field = fieldsRef.current[key];\r\n                            if (field) {\r\n                                if (field.ref.focus) {\r\n                                    field.ref.focus();\r\n                                    break;\r\n                                }\r\n                                else if (field.options) {\r\n                                    field.options[0].ref.focus();\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                errorsRef.current = fieldErrors;\r\n            }\r\n        }\r\n        finally {\r\n            isSubmittedRef.current = true;\r\n            isSubmittingRef.current = false;\r\n            submitCountRef.current = submitCountRef.current + 1;\r\n            reRender();\r\n        }\r\n    }, [\r\n        reRender,\r\n        submitFocusError,\r\n        validateFieldCurry,\r\n        validateFieldsSchemaCurry,\r\n        validationSchema,\r\n    ]);\r\n    const resetRefs = () => {\r\n        errorsRef.current = {};\r\n        fieldsRef.current = {};\r\n        touchedFieldsRef.current = {};\r\n        validFieldsRef.current = new Set();\r\n        fieldsWithValidationRef.current = new Set();\r\n        defaultRenderValuesRef.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        dirtyFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n        isSubmittedRef.current = false;\r\n        isDirtyRef.current = false;\r\n        isValidRef.current = true;\r\n        submitCountRef.current = 0;\r\n    };\r\n    const reset = (values) => {\r\n        for (const value of Object.values(fieldsRef.current)) {\r\n            if (value && value.ref && value.ref.closest) {\r\n                try {\r\n                    value.ref.closest('form').reset();\r\n                    break;\r\n                }\r\n                catch (_a) { }\r\n            }\r\n        }\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray(values));\r\n        resetRefs();\r\n        if (values) {\r\n            defaultValuesRef.current = values;\r\n        }\r\n        reRender();\r\n    };\r\n    const getValues = (payload) => {\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const outputValues = isEmptyObject(fieldValues)\r\n            ? defaultValuesRef.current\r\n            : fieldValues;\r\n        return payload && payload.nest\r\n            ? transformToNestObject(outputValues)\r\n            : outputValues;\r\n    };\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        fieldsRef.current &&\r\n            Object.values(fieldsRef.current).forEach((field) => removeEventListenerAndRef(field, true));\r\n    }, [removeEventListenerAndRef]);\r\n    if (!validationSchema) {\r\n        isValidRef.current =\r\n            validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\r\n                isEmptyObject(errorsRef.current);\r\n    }\r\n    const formState = {\r\n        dirty: isDirtyRef.current,\r\n        isSubmitted: isSubmittedRef.current,\r\n        submitCount: submitCountRef.current,\r\n        touched: touchedFieldsRef.current,\r\n        isSubmitting: isSubmittingRef.current,\r\n        isValid: isOnSubmit\r\n            ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\r\n            : isEmptyObject(fieldsRef.current) || isValidRef.current,\r\n    };\r\n    const control = {\r\n        register,\r\n        unregister,\r\n        setValue,\r\n        triggerValidation,\r\n        formState,\r\n        mode: {\r\n            isOnBlur,\r\n            isOnSubmit,\r\n        },\r\n        reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnSubmit,\r\n        },\r\n        errors: errorsRef.current,\r\n        fieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        fieldArrayNamesRef,\r\n        isDirtyRef,\r\n        readFormStateRef,\r\n        defaultValuesRef,\r\n    };\r\n    return {\r\n        watch,\r\n        control,\r\n        handleSubmit,\r\n        setValue,\r\n        triggerValidation,\r\n        getValues: useCallback(getValues, []),\r\n        reset: useCallback(reset, [reRender]),\r\n        register: useCallback(register, [defaultValuesRef.current]),\r\n        unregister: useCallback(unregister, [removeEventListenerAndRef]),\r\n        clearError: useCallback(clearError, []),\r\n        setError: useCallback(setError, []),\r\n        errors: errorsRef.current,\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return {};\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n}\n\nconst FormGlobalContext = createContext(null);\r\nfunction useFormContext() {\r\n    return useContext(FormGlobalContext);\r\n}\r\nfunction FormContext(_a) {\r\n    var { children, formState, errors } = _a, restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\r\n    return (createElement(FormGlobalContext.Provider, { value: Object.assign(Object.assign({}, restMethods), { formState, errors }) }, children));\r\n}\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nconst appendId = (value) => (Object.assign(Object.assign({}, value), { id: generateId() }));\r\nconst mapIds = (data) => (isArray(data) ? data : []).map(value => appendId(value));\n\nvar removeArrayAt = (data, index) => !isUndefined(index) && isArray(data)\r\n    ? [...data.slice(0, index), ...data.slice(index + 1)]\r\n    : [];\n\nvar moveArrayAt = (data, from, to) => isArray(data) && data.splice(to, 0, data.splice(from, 1)[0]);\n\nvar swapArrayAt = (fields, indexA, indexB) => isArray(fields) &&\r\n    ([fields[indexA], fields[indexB]] = [fields[indexB], fields[indexA]]);\n\nfunction useFieldArray({ control, name }) {\r\n    const methods = useFormContext();\r\n    const { resetFieldArrayFunctionRef, fieldArrayNamesRef, fieldsRef, defaultValuesRef, unregister, isDirtyRef, readFormStateRef, } = control || methods.control;\r\n    const memoizedDefaultValues = useMemo(() => get(defaultValuesRef.current, name, []), \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [name]);\r\n    const [fields, setField] = useState$1(mapIds(memoizedDefaultValues));\r\n    const getFieldValuesByName = (fields, name) => transformToNestObject(getFieldsValues(fields))[name];\r\n    const resetFields = (flagOrFields) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = isUndefined(flagOrFields)\r\n                ? true\r\n                : getIsFieldsDifferent(flagOrFields, memoizedDefaultValues);\r\n        }\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name)) {\r\n                unregister(key);\r\n            }\r\n        }\r\n    };\r\n    const append = (value) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = true;\r\n        }\r\n        setField([...fields, appendId(value)]);\r\n    };\r\n    const prepend = (value) => {\r\n        resetFields();\r\n        setField(mapIds([appendId(value), ...fields]));\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFields = removeArrayAt(getFieldValuesByName(fieldsRef.current, name), index);\r\n        resetFields(updatedFields);\r\n        setField(mapIds(updatedFields));\r\n    };\r\n    const insert = (index, value) => {\r\n        const fieldValues = getFieldValuesByName(fieldsRef.current, name);\r\n        resetFields();\r\n        setField(mapIds([\r\n            ...fieldValues.slice(0, index),\r\n            appendId(value),\r\n            ...fieldValues.slice(index),\r\n        ]));\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const fieldValues = getFieldValuesByName(fieldsRef.current, name);\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields(fieldValues);\r\n        setField(mapIds(fieldValues));\r\n    };\r\n    const move = (from, to) => {\r\n        const fieldValues = getFieldValuesByName(fieldsRef.current, name);\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields(fieldValues);\r\n        setField(mapIds(fieldValues));\r\n    };\r\n    const reset = (values) => {\r\n        resetFields();\r\n        setField(mapIds(get(values, name)));\r\n    };\r\n    useEffect$1(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        fieldArrayNames.add(name);\r\n        resetFunctions[name] = reset;\r\n        return () => {\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            fieldArrayNames.delete(name);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [name]);\r\n    return {\r\n        swap,\r\n        move,\r\n        prepend,\r\n        append,\r\n        remove,\r\n        insert,\r\n        fields,\r\n    };\r\n}\n\nvar getInputValue = (target, isCheckbox) => {\r\n    if (isNullOrUndefined(target)) {\r\n        return target;\r\n    }\r\n    return isCheckbox\r\n        ? isUndefined(target.checked)\r\n            ? target\r\n            : target.checked\r\n        : isUndefined(target.value)\r\n            ? target\r\n            : target.value;\r\n};\n\nconst Controller = (_a) => {\r\n    var { name, rules, as: InnerComponent, onChange, onChangeName = VALIDATION_MODE.onChange, onBlurName = VALIDATION_MODE.onBlur, valueName, defaultValue, control } = _a, rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\"]);\r\n    const methods = useFormContext();\r\n    const { defaultValuesRef, setValue, register, unregister, errors, triggerValidation, mode: { isOnSubmit, isOnBlur }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, fieldsRef, fieldArrayNamesRef, } = control || methods.control;\r\n    const [value, setInputStateValue] = useState$1(isUndefined(defaultValue)\r\n        ? get(defaultValuesRef.current, name)\r\n        : defaultValue);\r\n    const valueRef = useRef$1(value);\r\n    const isCheckboxInput = isBoolean(value);\r\n    const shouldValidate = () => !skipValidation({\r\n        hasError: !!get(errors, name),\r\n        isOnBlur,\r\n        isOnSubmit,\r\n        isReValidateOnBlur,\r\n        isReValidateOnSubmit,\r\n        isSubmitted,\r\n    });\r\n    const commonTask = (target) => {\r\n        const data = getInputValue(target, isCheckboxInput);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    };\r\n    const eventWrapper = (event) => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\r\n    const handleChange = (e) => {\r\n        const data = commonTask(e && e.target ? e.target : e);\r\n        setValue(name, data, shouldValidate());\r\n    };\r\n    const registerField = () => register(Object.defineProperty({\r\n        name,\r\n    }, VALUE, {\r\n        set(data) {\r\n            setInputStateValue(data);\r\n            valueRef.current = data;\r\n        },\r\n        get() {\r\n            return valueRef.current;\r\n        },\r\n    }), Object.assign({}, rules));\r\n    if (!fieldsRef.current[name]) {\r\n        registerField();\r\n    }\r\n    useEffect$1(() => {\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        registerField();\r\n        return () => {\r\n            if (!isNameInFieldArray(fieldArrayNames, name)) {\r\n                unregister(name);\r\n            }\r\n        };\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [name]);\r\n    const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange\r\n        ? { [onChangeName]: eventWrapper(onChange) }\r\n        : { [onChangeName]: handleChange })), (isOnBlur || isReValidateOnBlur\r\n        ? { [onBlurName]: () => triggerValidation(name) }\r\n        : {})), { [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value });\r\n    return isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, Object.assign({}, props)));\r\n};\n\nconst ErrorMessage = ({ as: InnerComponent, errors, name, children, }) => {\r\n    const methods = useFormContext();\r\n    const { message, types } = get(errors || methods.errors, name, {});\r\n    if (!message) {\r\n        return null;\r\n    }\r\n    const props = {\r\n        children: children ? children({ message, messages: types }) : message,\r\n    };\r\n    return InnerComponent ? (isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, Object.assign({}, props)))) : (createElement(Fragment, Object.assign({}, props)));\r\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };\n"],"sourceRoot":""}