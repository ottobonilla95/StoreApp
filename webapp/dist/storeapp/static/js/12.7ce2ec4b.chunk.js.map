{"version":3,"sources":["../node_modules/semantic-ui-react/dist/es/elements/Divider/Divider.js","../node_modules/semantic-ui-react/dist/es/elements/Placeholder/PlaceholderHeader.js","../node_modules/semantic-ui-react/dist/es/elements/Placeholder/PlaceholderImage.js","../node_modules/semantic-ui-react/dist/es/elements/Placeholder/PlaceholderLine.js","../node_modules/semantic-ui-react/dist/es/elements/Placeholder/PlaceholderParagraph.js","../node_modules/semantic-ui-react/dist/es/elements/Placeholder/Placeholder.js","../node_modules/semantic-ui-react/dist/es/collections/Grid/GridColumn.js","../node_modules/semantic-ui-react/dist/es/collections/Grid/GridRow.js","../node_modules/semantic-ui-react/dist/es/collections/Grid/Grid.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentGroup.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentInline.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/Segment.js","components/placeholder/BasicInfoAccountPlaceHolder.js","views/app/account/index.js"],"names":["Divider","props","children","className","clearing","content","fitted","hidden","horizontal","inverted","section","vertical","classes","cx","useKeyOnly","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","childrenUtils","isNil","handledProps","propTypes","PlaceholderHeader","image","PlaceholderImage","square","rectangular","PlaceholderLine","length","PlaceholderParagraph","Placeholder","fluid","Header","Image","Line","Paragraph","GridColumn","computer","color","floated","largeScreen","mobile","only","stretched","tablet","textAlign","verticalAlign","widescreen","width","useMultipleProp","useTextAlignProp","useValueAndKey","useVerticalAlignProp","useWidthProp","create","createShorthandFactory","GridRow","centered","columns","divided","reversed","Grid","celled","container","doubling","padded","relaxed","stackable","useKeyOrValueAndKey","Column","Row","SegmentGroup","compact","piled","raised","size","stacked","SegmentInline","Segment","attached","basic","circular","disabled","loading","placeholder","secondary","tertiary","Group","Inline","BasicInfoAccountPlaceHolder","BasicInfo","lazy","Security","AccountConfiguration","connect","state","account","dispatch","getUserInfo","changeName","newName","changeEmail","newEmail","changePassword","newPassword","deleteAccount","t","useTranslation","useEffect","Menu","tabular","to","match","path","activeClassName","accounBasictInfo","ChangeName","ChangeEmail","ChangePassword"],"mappings":"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","file":"static/js/12.7ce2ec4b.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A divider visually segments content into groups.\n */\n\nfunction Divider(props) {\n  var children = props.children,\n      className = props.className,\n      clearing = props.clearing,\n      content = props.content,\n      fitted = props.fitted,\n      hidden = props.hidden,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      section = props.section,\n      vertical = props.vertical;\n  var classes = cx('ui', useKeyOnly(clearing, 'clearing'), useKeyOnly(fitted, 'fitted'), useKeyOnly(hidden, 'hidden'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useKeyOnly(section, 'section'), useKeyOnly(vertical, 'vertical'), 'divider', className);\n  var rest = getUnhandledProps(Divider, props);\n  var ElementType = getElementType(Divider, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nDivider.handledProps = [\"as\", \"children\", \"className\", \"clearing\", \"content\", \"fitted\", \"hidden\", \"horizontal\", \"inverted\", \"section\", \"vertical\"];\nDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Divider can clear the content above it. */\n  clearing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Divider can be fitted without any space above or below it. */\n  fitted: PropTypes.bool,\n\n  /** Divider can divide content without creating a dividing line. */\n  hidden: PropTypes.bool,\n\n  /** Divider can segment content horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Divider can have its colours inverted. */\n  inverted: PropTypes.bool,\n\n  /** Divider can provide greater margins to divide sections of content. */\n  section: PropTypes.bool,\n\n  /** Divider can segment content vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Divider;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A placeholder can contain a header.\n */\n\nfunction PlaceholderHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      image = props.image;\n  var classes = cx(useKeyOnly(image, 'image'), 'header', className);\n  var rest = getUnhandledProps(PlaceholderHeader, props);\n  var ElementType = getElementType(PlaceholderHeader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nPlaceholderHeader.handledProps = [\"as\", \"children\", \"className\", \"content\", \"image\"];\nPlaceholderHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A placeholder can contain an image. */\n  image: PropTypes.bool\n} : {};\nexport default PlaceholderHeader;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A placeholder can contain an image.\n */\n\nfunction PlaceholderImage(props) {\n  var className = props.className,\n      square = props.square,\n      rectangular = props.rectangular;\n  var classes = cx(useKeyOnly(square, 'square'), useKeyOnly(rectangular, 'rectangular'), 'image', className);\n  var rest = getUnhandledProps(PlaceholderImage, props);\n  var ElementType = getElementType(PlaceholderImage, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }));\n}\n\nPlaceholderImage.handledProps = [\"as\", \"className\", \"rectangular\", \"square\"];\nPlaceholderImage.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** An image can modify size correctly with responsive styles. */\n  square: customPropTypes.every([customPropTypes.disallow(['rectangular']), PropTypes.bool]),\n\n  /** An image can modify size correctly with responsive styles. */\n  rectangular: customPropTypes.every([customPropTypes.disallow(['square']), PropTypes.bool])\n} : {};\nexport default PlaceholderImage;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getElementType, getUnhandledProps } from '../../lib';\n/**\n * A placeholder can contain have lines of text.\n */\n\nfunction PlaceholderLine(props) {\n  var className = props.className,\n      length = props.length;\n  var classes = cx('line', length, className);\n  var rest = getUnhandledProps(PlaceholderLine, props);\n  var ElementType = getElementType(PlaceholderLine, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }));\n}\n\nPlaceholderLine.handledProps = [\"as\", \"className\", \"length\"];\nPlaceholderLine.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A line can specify how long its contents should appear. */\n  length: PropTypes.oneOf(['full', 'very long', 'long', 'medium', 'short', 'very short'])\n} : {};\nexport default PlaceholderLine;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A placeholder can contain a paragraph.\n */\n\nfunction PlaceholderParagraph(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('paragraph', className);\n  var rest = getUnhandledProps(PlaceholderParagraph, props);\n  var ElementType = getElementType(PlaceholderParagraph, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nPlaceholderParagraph.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nPlaceholderParagraph.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default PlaceholderParagraph;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\nimport PlaceholderHeader from './PlaceholderHeader';\nimport PlaceholderImage from './PlaceholderImage';\nimport PlaceholderLine from './PlaceholderLine';\nimport PlaceholderParagraph from './PlaceholderParagraph';\n/**\n * A placeholder is used to reserve splace for content that soon will appear in a layout.\n */\n\nfunction Placeholder(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      fluid = props.fluid,\n      inverted = props.inverted;\n  var classes = cx('ui', useKeyOnly(fluid, 'fluid'), useKeyOnly(inverted, 'inverted'), 'placeholder', className);\n  var rest = getUnhandledProps(Placeholder, props);\n  var ElementType = getElementType(Placeholder, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nPlaceholder.handledProps = [\"as\", \"children\", \"className\", \"content\", \"fluid\", \"inverted\"];\nPlaceholder.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A fluid placeholder takes up the width of its container. */\n  fluid: PropTypes.bool,\n\n  /** A placeholder can have their colors inverted. */\n  inverted: PropTypes.bool\n} : {};\nPlaceholder.Header = PlaceholderHeader;\nPlaceholder.Image = PlaceholderImage;\nPlaceholder.Line = PlaceholderLine;\nPlaceholder.Paragraph = PlaceholderParagraph;\nexport default Placeholder;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, createShorthandFactory, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useValueAndKey, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A column sub-component for Grid.\n */\n\nfunction GridColumn(props) {\n  var children = props.children,\n      className = props.className,\n      computer = props.computer,\n      color = props.color,\n      floated = props.floated,\n      largeScreen = props.largeScreen,\n      mobile = props.mobile,\n      only = props.only,\n      stretched = props.stretched,\n      tablet = props.tablet,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      widescreen = props.widescreen,\n      width = props.width;\n  var classes = cx(color, useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign), useWidthProp(computer, 'wide computer'), useWidthProp(largeScreen, 'wide large screen'), useWidthProp(mobile, 'wide mobile'), useWidthProp(tablet, 'wide tablet'), useWidthProp(widescreen, 'wide widescreen'), useWidthProp(width, 'wide'), 'column', className);\n  var rest = getUnhandledProps(GridColumn, props);\n  var ElementType = getElementType(GridColumn, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridColumn.handledProps = [\"as\", \"children\", \"className\", \"color\", \"computer\", \"floated\", \"largeScreen\", \"mobile\", \"only\", \"stretched\", \"tablet\", \"textAlign\", \"verticalAlign\", \"widescreen\", \"width\"];\nGridColumn.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid column can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A column can specify a width for a computer. */\n  computer: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can sit flush against the left or right edge of a row. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A column can specify a width for a large screen device. */\n  largeScreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify a width for a mobile device. */\n  mobile: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A column can stretch its contents to take up the entire grid or row height. */\n  stretched: PropTypes.bool,\n\n  /** A column can specify a width for a tablet device. */\n  tablet: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A column can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A column can specify a width for a wide screen device. */\n  widescreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** Represents width of column. */\n  width: customPropTypes.every([customPropTypes.disallow(['computer', 'largeScreen', 'mobile', 'tablet', 'widescreen']), PropTypes.oneOf(SUI.WIDTHS)])\n} : {};\nGridColumn.create = createShorthandFactory(GridColumn, function (children) {\n  return {\n    children: children\n  };\n});\nexport default GridColumn;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A row sub-component for Grid.\n */\n\nfunction GridRow(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      columns = props.columns,\n      divided = props.divided,\n      only = props.only,\n      reversed = props.reversed,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx(color, useKeyOnly(centered, 'centered'), useKeyOnly(divided, 'divided'), useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'row', className);\n  var rest = getUnhandledProps(GridRow, props);\n  var ElementType = getElementType(GridRow, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridRow.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"color\", \"columns\", \"divided\", \"only\", \"reversed\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGridRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A row can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid row can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Represents column count per line in Row. */\n  columns: PropTypes.oneOf([].concat(_toConsumableArray(SUI.WIDTHS), ['equal'])),\n\n  /** A row can have dividers between its columns. */\n  divided: PropTypes.bool,\n\n  /** A row can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A row can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A row can stretch its contents to take up the entire column height. */\n  stretched: PropTypes.bool,\n\n  /** A row can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A row can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default GridRow;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport GridColumn from './GridColumn';\nimport GridRow from './GridRow';\n/**\n * A grid is used to harmonize negative space in a layout.\n */\n\nfunction Grid(props) {\n  var celled = props.celled,\n      centered = props.centered,\n      children = props.children,\n      className = props.className,\n      columns = props.columns,\n      container = props.container,\n      divided = props.divided,\n      doubling = props.doubling,\n      inverted = props.inverted,\n      padded = props.padded,\n      relaxed = props.relaxed,\n      reversed = props.reversed,\n      stackable = props.stackable,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(container, 'container'), useKeyOnly(doubling, 'doubling'), useKeyOnly(inverted, 'inverted'), useKeyOnly(stackable, 'stackable'), useKeyOnly(stretched, 'stretched'), useKeyOrValueAndKey(celled, 'celled'), useKeyOrValueAndKey(divided, 'divided'), useKeyOrValueAndKey(padded, 'padded'), useKeyOrValueAndKey(relaxed, 'relaxed'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'grid', className);\n  var rest = getUnhandledProps(Grid, props);\n  var ElementType = getElementType(Grid, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGrid.handledProps = [\"as\", \"celled\", \"centered\", \"children\", \"className\", \"columns\", \"container\", \"divided\", \"doubling\", \"inverted\", \"padded\", \"relaxed\", \"reversed\", \"stackable\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGrid.Column = GridColumn;\nGrid.Row = GridRow;\nGrid.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A grid can have rows divided into cells. */\n  celled: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['internally'])]),\n\n  /** A grid can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Represents column count per row in Grid. */\n  columns: PropTypes.oneOf([].concat(_toConsumableArray(SUI.WIDTHS), ['equal'])),\n\n  /** A grid can be combined with a container to use the available layout and alignment. */\n  container: PropTypes.bool,\n\n  /** A grid can have dividers between its columns. */\n  divided: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['vertically'])]),\n\n  /** A grid can double its column width on tablet and mobile sizes. */\n  doubling: PropTypes.bool,\n\n  /** A grid's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A grid can preserve its vertical and horizontal gutters on first and last columns. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['horizontally', 'vertically'])]),\n\n  /** A grid can increase its gutters to allow for more negative space. */\n  relaxed: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A grid can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A grid can have its columns stack on-top of each other after reaching mobile breakpoints. */\n  stackable: PropTypes.bool,\n\n  /** A grid can stretch its contents to take up the entire grid height. */\n  stretched: PropTypes.bool,\n\n  /** A grid can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A grid can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default Grid;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\n/**\n * A group of segments can be formatted to appear together.\n */\n\nfunction SegmentGroup(props) {\n  var children = props.children,\n      className = props.className,\n      compact = props.compact,\n      content = props.content,\n      horizontal = props.horizontal,\n      piled = props.piled,\n      raised = props.raised,\n      size = props.size,\n      stacked = props.stacked;\n  var classes = cx('ui', size, useKeyOnly(compact, 'compact'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(stacked, 'stacked'), 'segments', className);\n  var rest = getUnhandledProps(SegmentGroup, props);\n  var ElementType = getElementType(SegmentGroup, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentGroup.handledProps = [\"as\", \"children\", \"className\", \"compact\", \"content\", \"horizontal\", \"piled\", \"raised\", \"size\", \"stacked\"];\nSegmentGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Formats content to be aligned horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment group may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment group can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool\n} : {};\nexport default SegmentGroup;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A placeholder segment can be inline.\n */\n\nfunction SegmentInline(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('inline', className);\n  var rest = getUnhandledProps(SegmentInline, props);\n  var ElementType = getElementType(SegmentInline, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentInline.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nSegmentInline.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default SegmentInline;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useValueAndKey } from '../../lib';\nimport SegmentGroup from './SegmentGroup';\nimport SegmentInline from './SegmentInline';\n/**\n * A segment is used to create a grouping of related content.\n */\n\nfunction Segment(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      children = props.children,\n      circular = props.circular,\n      className = props.className,\n      clearing = props.clearing,\n      color = props.color,\n      compact = props.compact,\n      content = props.content,\n      disabled = props.disabled,\n      floated = props.floated,\n      inverted = props.inverted,\n      loading = props.loading,\n      placeholder = props.placeholder,\n      padded = props.padded,\n      piled = props.piled,\n      raised = props.raised,\n      secondary = props.secondary,\n      size = props.size,\n      stacked = props.stacked,\n      tertiary = props.tertiary,\n      textAlign = props.textAlign,\n      vertical = props.vertical;\n  var classes = cx('ui', color, size, useKeyOnly(basic, 'basic'), useKeyOnly(circular, 'circular'), useKeyOnly(clearing, 'clearing'), useKeyOnly(compact, 'compact'), useKeyOnly(disabled, 'disabled'), useKeyOnly(inverted, 'inverted'), useKeyOnly(loading, 'loading'), useKeyOnly(placeholder, 'placeholder'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(secondary, 'secondary'), useKeyOnly(stacked, 'stacked'), useKeyOnly(tertiary, 'tertiary'), useKeyOnly(vertical, 'vertical'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), 'segment', className);\n  var rest = getUnhandledProps(Segment, props);\n  var ElementType = getElementType(Segment, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegment.handledProps = [\"as\", \"attached\", \"basic\", \"children\", \"circular\", \"className\", \"clearing\", \"color\", \"compact\", \"content\", \"disabled\", \"floated\", \"inverted\", \"loading\", \"padded\", \"piled\", \"placeholder\", \"raised\", \"secondary\", \"size\", \"stacked\", \"tertiary\", \"textAlign\", \"vertical\"];\nSegment.Group = SegmentGroup;\nSegment.Inline = SegmentInline;\nSegment.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach segment to other content, like a header. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A basic segment has no special formatting. */\n  basic: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** A segment can be circular. */\n  circular: PropTypes.bool,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment can clear floated content. */\n  clearing: PropTypes.bool,\n\n  /** Segment can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A segment may show its content is disabled. */\n  disabled: PropTypes.bool,\n\n  /** Segment content can be floated to the left or right. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A segment can have its colors inverted for contrast. */\n  inverted: PropTypes.bool,\n\n  /** A segment may show its content is being loaded. */\n  loading: PropTypes.bool,\n\n  /** A segment can increase its padding. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A segment can be used to reserve space for conditionally displayed content. */\n  placeholder: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment can be formatted to appear less noticeable. */\n  secondary: PropTypes.bool,\n\n  /** A segment can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool,\n\n  /** A segment can be formatted to appear even less noticeable. */\n  tertiary: PropTypes.bool,\n\n  /** Formats content to be aligned as part of a vertical group. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** Formats content to be aligned vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Segment;","import React from \"react\";\n\n// semantic-ui-react\nimport { Divider, Placeholder } from \"semantic-ui-react\";\n\nconst BasicInfoAccountPlaceHolder = () => {\n  return (\n    <>\n      <Placeholder>\n        <Placeholder.Header>\n          <Placeholder.Line />\n        </Placeholder.Header>\n      </Placeholder>\n\n      <Divider />\n\n      <Placeholder>\n        <Placeholder.Header>\n          <Placeholder.Line />\n        </Placeholder.Header>\n      </Placeholder>\n\n      <Placeholder>\n        <Placeholder.Paragraph>\n          <Placeholder.Line />\n        </Placeholder.Paragraph>\n      </Placeholder>\n      <br />\n\n      <Placeholder>\n        <Placeholder.Header>\n          <Placeholder.Line />\n        </Placeholder.Header>\n      </Placeholder>\n\n      <Placeholder>\n        <Placeholder.Paragraph>\n          <Placeholder.Line />\n        </Placeholder.Paragraph>\n      </Placeholder>\n      <br />\n    </>\n  );\n};\n\nexport default BasicInfoAccountPlaceHolder;\n","import React, { useEffect } from \"react\";\n\n// router\nimport { Route } from \"react-router-dom\";\n\n// semantic ui react\nimport { Menu, Grid, Segment } from \"semantic-ui-react\";\n\n// redux\nimport { connect } from \"react-redux\";\n\n// router\nimport { NavLink } from \"react-router-dom\";\n\n// components\nimport BasicInfoAccountPlaceHolder from \"../../../components/placeholder/BasicInfoAccountPlaceHolder\";\n\n// actions\nimport {\n  changeName,\n  changeEmail,\n  changePassword,\n  deleteAccount,\n  getUserInfo,\n} from \"../../../redux/account/actions\";\n\n// react-i18next\nimport { useTranslation } from \"react-i18next\";\n\n// routes\nconst BasicInfo = React.lazy(() => import(\"./BasicInfo\"));\nconst Security = React.lazy(() => import(\"./Security\"));\nconst AccountConfiguration = React.lazy(() => import(\"./AccountConfiguration\"));\n\nconst Account = (props) => {\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    props.getUserInfo();\n  }, []);\n\n  return (\n    <>\n      <Grid>\n        <Grid.Column width={4}>\n          <Menu fluid vertical tabular>\n            <NavLink\n              className=\"item\"\n              to={`${props.match.path}/basicinfo`}\n              activeClassName=\"active\"\n            >\n              {t(\"modules.account.basic-info.itemlabel\", \"Basic Info\")}\n            </NavLink>\n            <NavLink\n              className=\"item\"\n              to={`${props.match.path}/security`}\n              activeClassName=\"active\"\n            >\n              {t(\"modules.account.security.itemlabel\", \"Security\")}\n            </NavLink>\n            <NavLink\n              className=\"item\"\n              to={`${props.match.path}/account`}\n              activeClassName=\"active\"\n            >\n              {t(\"modules.account.account.itemlabel\", \"Account\")}\n            </NavLink>\n          </Menu>\n        </Grid.Column>\n\n        <Grid.Column stretched width={12}>\n          <Segment>\n            <Route path={`${props.match.path}/basicinfo`}>\n              {props.account.accounBasictInfo && (\n                <BasicInfo\n                  ChangeName={props.changeName}\n                  ChangeEmail={props.changeEmail}\n                  account={props.account}\n                />\n              )}\n              {!props.account.accounBasictInfo && (\n                <BasicInfoAccountPlaceHolder />\n              )}\n            </Route>\n            <Route path={`${props.match.path}/security`}>\n              <Security\n                ChangePassword={props.changePassword}\n                account={props.account}\n              />\n            </Route>\n            <Route path={`${props.match.path}/account`}>\n              <AccountConfiguration\n                deleteAccount={props.deleteAccount}\n                account={props.account}\n              />\n            </Route>\n          </Segment>\n        </Grid.Column>\n      </Grid>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return { account: state.account };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getUserInfo: () => dispatch(getUserInfo()),\n    changeName: (newName) => dispatch(changeName(newName)),\n    changeEmail: (newEmail) => dispatch(changeEmail(newEmail)),\n    changePassword: (newPassword) => dispatch(changePassword(newPassword)),\n    deleteAccount: () => dispatch(deleteAccount()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Account);\n"],"sourceRoot":""}