{"version":3,"sources":["views/user/signup/index.js"],"names":["connect","state","user","dispatch","signUp","userData","props","t","useTranslation","useForm","handleSubmit","errors","control","watch","className","onSubmit","data","confirmpassword","as","Field","Input","label","placeholder","disabled","loading","error","username","content","message","pointing","name","rules","required","defaultValue","email","pattern","value","type","password","minLength","validate","onClick","history","push"],"mappings":"mGAAA,sFA4MeA,uBAZS,SAACC,GACvB,MAAO,CACLC,KAAMD,EAAMC,SAIW,SAACC,GAC1B,MAAO,CACLC,OAAQ,SAACC,GAAD,OAAcF,EAASC,YAAOC,QAI3BL,EAxLA,SAACM,GAAW,IACjBC,EAAMC,cAAND,EADgB,EAIyBE,cAAzCC,EAJgB,EAIhBA,aAAcC,EAJE,EAIFA,OAAQC,EAJN,EAIMA,QAASC,EAJf,EAIeA,MAOvC,OACE,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,kBACb,4BAAKP,EAAE,wBAAyB,YAChC,yBAAKO,UAAU,eAEf,kBAAC,IAAD,CAAMC,SAAUL,GAXL,SAACM,UACTA,EAAKC,gBACZX,EAAMF,OAAOY,OAUP,kBAAC,IAAD,CACEE,GACE,kBAAC,IAAKC,MAAN,CACEP,QAASQ,IACTC,MAAOd,EAAE,qCAAsC,YAC/Ce,YAAaf,EACX,qCACA,YAEFgB,SAAUjB,EAAMJ,KAAKsB,QACrBC,MACEd,EAAOe,UAAY,CACjBC,QAAShB,EAAOe,SAASE,QACzBC,SAAU,WAKlBC,KAAK,WACLlB,QAASA,EACTmB,MAAO,CACLC,SAAUzB,EACR,wCACA,2BAGJ0B,aAAa,KAEf,kBAAC,IAAD,CACEf,GACE,kBAAC,IAAKC,MAAN,CACEP,QAASQ,IACTC,MAAOd,EAAE,kCAAmC,SAC5Ce,YAAaf,EAAE,kCAAmC,SAClDgB,SAAUjB,EAAMJ,KAAKsB,QACrBC,MACEd,EAAOuB,OAAS,CACdP,QAAShB,EAAOuB,MAAMN,QACtBC,SAAU,WAKlBC,KAAK,QACLlB,QAASA,EACTmB,MAAO,CACLC,SAAUzB,EACR,wCACA,0BAEF4B,QAAS,CACPC,MAAO,4CACPR,QAASrB,EACP,uCACA,mBAIN0B,aAAa,KAEf,kBAAC,IAAD,CACEf,GACE,kBAAC,IAAKC,MAAN,CACEP,QAASQ,IACTC,MAAOd,EAAE,qCAAsC,YAC/Ce,YAAaf,EACX,qCACA,YAEFgB,SAAUjB,EAAMJ,KAAKsB,QACrBa,KAAK,WACLZ,MACEd,EAAO2B,UAAY,CACjBX,QAAShB,EAAO2B,SAASV,QACzBC,SAAU,WAKlBC,KAAK,WACLlB,QAASA,EACTmB,MAAO,CACLC,SAAUzB,EACR,wCACA,0BAEFgC,UAAW,CAAEH,MAAO,EAAGR,QAAS,oBAElCK,aAAa,KAGf,kBAAC,IAAD,CACEf,GACE,kBAAC,IAAKC,MAAN,CACEP,QAASQ,IACTC,MAAOd,EACL,4CACA,oBAEFe,YAAaf,EACX,4CACA,oBAEFgB,SAAUjB,EAAMJ,KAAKsB,QACrBa,KAAK,WACLZ,MACEd,EAAOM,iBAAmB,CACxBU,QAAShB,EAAOM,gBAAgBW,QAChCC,SAAU,WAKlBC,KAAK,kBACLlB,QAASA,EACTmB,MAAO,CACLC,SAAUzB,EACR,wCACA,0BAEFgC,UAAW,CAAEH,MAAO,EAAGR,QAAS,mBAChCY,SAAU,SAACJ,GACT,OAAIA,IAAUvB,EAAM,aACR,4BAGhBoB,aAAa,KAGf,4BACEnB,UAAS,6BACPR,EAAMJ,KAAKsB,QAAU,UAAY,IAEnCa,KAAK,SACLd,SAAUjB,EAAMJ,KAAKsB,SAEpBjB,EAAE,qCAAsC,YAE3C,4BACE8B,KAAK,SACLvB,UAAU,YACV2B,QAAS,WACPC,IAAQC,KAAK,MAEfpB,SAAUjB,EAAMJ,KAAKsB,SAEpBjB,EAAE,oBAAqB","file":"static/js/27.36076e71.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\n\n// history\nimport history from \"../../../utils/history\";\n\n// react-hook-form\nimport { useForm, Controller } from \"react-hook-form\";\n\n// semantic-ui-react\nimport { Form, Input } from \"semantic-ui-react\";\n\n// actions\nimport { signUp } from \"../../../redux/auth/actions\";\n\n// redux\nimport { connect } from \"react-redux\";\n\n// react-i18next\nimport { useTranslation } from \"react-i18next\";\n\nconst SignUp = (props) => {\n  const { t } = useTranslation();\n\n  // form\n  const { handleSubmit, errors, control, watch } = useForm();\n\n  const onSubmit = (data) => {\n    delete data.confirmpassword;\n    props.signUp(data);\n  };\n\n  return (\n    <div className=\"signup-container\">\n      <div className=\"form-container\">\n        <h2>{t(\"modules.signup.tittle\", \"Sign Up\")}</h2>\n        <div className=\"ui divider\"></div>\n\n        <Form onSubmit={handleSubmit(onSubmit)}>\n          <Controller\n            as={\n              <Form.Field\n                control={Input}\n                label={t(\"modules.signup.form.label.username\", \"Username\")}\n                placeholder={t(\n                  \"modules.signup.form.label.username\",\n                  \"Username\"\n                )}\n                disabled={props.user.loading}\n                error={\n                  errors.username && {\n                    content: errors.username.message,\n                    pointing: \"below\",\n                  }\n                }\n              />\n            }\n            name=\"username\"\n            control={control}\n            rules={{\n              required: t(\n                \"form.validationmessages.requiredfield\",\n                \"This field is required\"\n              ),\n            }}\n            defaultValue=\"\"\n          />\n          <Controller\n            as={\n              <Form.Field\n                control={Input}\n                label={t(\"modules.signup.form.label.email\", \"Email\")}\n                placeholder={t(\"modules.signup.form.label.email\", \"Email\")}\n                disabled={props.user.loading}\n                error={\n                  errors.email && {\n                    content: errors.email.message,\n                    pointing: \"below\",\n                  }\n                }\n              />\n            }\n            name=\"email\"\n            control={control}\n            rules={{\n              required: t(\n                \"form.validationmessages.requiredfield\",\n                \"This field is required\"\n              ),\n              pattern: {\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                message: t(\n                  \"form.validationmessages.invalidemail\",\n                  \"Invalid Email\"\n                ),\n              },\n            }}\n            defaultValue=\"\"\n          />\n          <Controller\n            as={\n              <Form.Field\n                control={Input}\n                label={t(\"modules.signup.form.label.password\", \"Password\")}\n                placeholder={t(\n                  \"modules.signup.form.label.password\",\n                  \"Password\"\n                )}\n                disabled={props.user.loading}\n                type=\"password\"\n                error={\n                  errors.password && {\n                    content: errors.password.message,\n                    pointing: \"below\",\n                  }\n                }\n              />\n            }\n            name=\"password\"\n            control={control}\n            rules={{\n              required: t(\n                \"form.validationmessages.requiredfield\",\n                \"This field is required\"\n              ),\n              minLength: { value: 8, message: \"Min length is 8\" },\n            }}\n            defaultValue=\"\"\n          />\n\n          <Controller\n            as={\n              <Form.Field\n                control={Input}\n                label={t(\n                  \"modules.signup.form.label.confirmpassword\",\n                  \"Confrim Password\"\n                )}\n                placeholder={t(\n                  \"modules.signup.form.label.confirmpassword\",\n                  \"Confrim Password\"\n                )}\n                disabled={props.user.loading}\n                type=\"password\"\n                error={\n                  errors.confirmpassword && {\n                    content: errors.confirmpassword.message,\n                    pointing: \"below\",\n                  }\n                }\n              />\n            }\n            name=\"confirmpassword\"\n            control={control}\n            rules={{\n              required: t(\n                \"form.validationmessages.requiredfield\",\n                \"This field is required\"\n              ),\n              minLength: { value: 8, message: \"Min length is 8\" },\n              validate: (value) => {\n                if (value === watch(\"password\")) return true;\n                else return \"Password does not match\";\n              },\n            }}\n            defaultValue=\"\"\n          />\n\n          <button\n            className={`ui button positive ${\n              props.user.loading ? \"loading\" : \"\"\n            }`}\n            type=\"submit\"\n            disabled={props.user.loading}\n          >\n            {t(\"modules.signup.form.buttons.signup\", \"Sign Up\")}\n          </button>\n          <button\n            type=\"button\"\n            className=\"ui button\"\n            onClick={() => {\n              history.push(\"/\");\n            }}\n            disabled={props.user.loading}\n          >\n            {t(\"form.buttons.back\", \"Back\")}\n          </button>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signUp: (userData) => dispatch(signUp(userData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\n"],"sourceRoot":""}