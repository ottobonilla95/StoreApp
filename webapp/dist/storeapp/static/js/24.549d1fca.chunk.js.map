{"version":3,"sources":["components/modals/ErrorModal.js","layout/AppLayout.js","views/index.js"],"names":["ErrorModal","props","Modal","open","Header","Content","Message","Actions","Button","onClick","closeErrorModal","positive","labelPosition","icon","content","connect","state","user","dispatch","signOut","signInSuccess","t","useTranslation","localStorage","getItem","isLoggedIn","JSON","parse","useState","errorModal","setErrorModal","useEffect","loginError","Menu","inverted","className","to","activeClassName","position","Dropdown","item","text","username","Item","history","push","Icon","name","primary","children","AppViews","React","lazy","UserViews","App","AppLayout","path","match","exact","component"],"mappings":"6NAyBeA,EApBI,SAAAC,GACjB,OACE,kBAACC,EAAA,EAAD,CAAOC,KAAMF,EAAME,MACjB,kBAACD,EAAA,EAAME,OAAP,eACA,kBAACF,EAAA,EAAMG,QAAP,KACE,2BAAIJ,EAAMK,UAEZ,kBAACJ,EAAA,EAAMK,QAAP,KACE,kBAACC,EAAA,EAAD,CACEC,QAAS,WAAKR,EAAMS,mBACpBC,UAAQ,EACRC,cAAc,QACdC,KAAK,YACLC,QAAQ,e,QCiHHC,eAXS,SAACC,GACvB,MAAO,CAAEC,KAAMD,EAAMC,SAGI,SAACC,GAC1B,MAAO,CACLC,QAAS,kBAAMD,EAASC,gBACxBC,cAAe,SAACH,GAAD,OAAUC,EAASE,YAAcH,QAIrCF,EA7GC,SAACd,GAAW,IAClBoB,EAAMC,cAAND,EAEJE,aAAaC,QAAQ,UAAYvB,EAAMgB,KAAKQ,YAC9CxB,EAAMmB,cAAcM,KAAKC,MAAMJ,aAAaC,QAAQ,UAGtD,IAPyB,EAWWI,oBAAS,GAXpB,mBAWlBC,EAXkB,KAWNC,EAXM,KAazBC,qBAAU,WACJ9B,EAAMgB,KAAKe,YACbF,GAAc,KAEf,CAAC7B,EAAMgB,KAAKe,aAMf,OACE,oCACE,kBAAC,EAAD,CACE1B,QAASL,EAAMgB,KAAKe,WACpB7B,KAAM0B,EACNnB,gBAAiB,WARrBoB,GAAc,MAaZ,kBAACG,EAAA,EAAD,CAAMC,UAAQ,EAACC,UAAU,YACvB,kBAAC,IAAD,CACEA,UAAU,OACVC,GAAG,sBACHC,gBAAgB,UAEfhB,EAAE,sBAAuB,SAE5B,kBAAC,IAAD,CACEc,UAAU,OACVC,GAAG,uBACHC,gBAAgB,UAEfhB,EAAE,uBAAwB,UAE7B,kBAACY,EAAA,EAAKA,KAAN,CAAWK,SAAS,SACjBrC,EAAMgB,KAAKQ,YACV,kBAACc,EAAA,EAAD,CAAUC,MAAI,EAACC,KAAMxC,EAAMgB,KAAKyB,UAC9B,kBAACH,EAAA,EAASN,KAAV,KACE,kBAACM,EAAA,EAASI,KAAV,CACElC,QAAS,WACPmC,IAAQC,KAAK,sCAGf,kBAACC,EAAA,EAAD,CAAMC,KAAK,SALb,IAKwB1B,EAAE,yBAA0B,YAEpD,kBAACkB,EAAA,EAASI,KAAV,CAAelC,QApDX,WAChBR,EAAMkB,YAoDQ,kBAAC2B,EAAA,EAAD,CAAMC,KAAK,YACV1B,EAAE,wBAAyB,eAMT,IAA1BpB,EAAMgB,KAAKQ,YACV,kBAACQ,EAAA,EAAKU,KAAN,KACE,kBAACnC,EAAA,EAAD,CACEwC,SAAO,EACPvC,QAAS,WACPmC,IAAQC,KAAK,4BAGdxB,EAAE,wBAAyB,cAKP,IAA1BpB,EAAMgB,KAAKQ,YACV,kBAACQ,EAAA,EAAKU,KAAN,KACE,kBAACnC,EAAA,EAAD,CACEC,QAAS,WACPmC,IAAQC,KAAK,aAGdxB,EAAE,wBAAyB,eAMrCpB,EAAMgD,aCnHb,oCASA,IAAMC,EAAWC,IAAMC,MAAK,kBAAM,kCAC5BC,EAAYF,IAAMC,MAAK,kBAAM,kCAEtBE,EAAM,SAACrD,GAClB,OACE,kBAACsD,EAAD,KACE,yBAAKpB,UAAU,gBACb,kBAAC,IAAD,CAAOqB,KAAI,UAAKvD,EAAMwD,MAAMD,KAAjB,KAA0BE,OAAK,GACxC,kBAAC,IAAD,CAAUtB,GAAE,UAAKnC,EAAMwD,MAAMD,KAAjB,WAEd,kBAAC,IAAD,CAAOA,KAAI,UAAKvD,EAAMwD,MAAMD,KAAjB,QAA6BG,UAAWT,IACnD,kBAAC,IAAD,CAAOM,KAAI,UAAKvD,EAAMwD,MAAMD,KAAjB,SAA8BG,UAAWN,OAM7CC","file":"static/js/24.549d1fca.chunk.js","sourcesContent":["import React from \"react\";\n\n// semantic-ui-react\nimport { Modal, Button } from \"semantic-ui-react\";\n\nconst ErrorModal = props => {\n  return (\n    <Modal open={props.open}>\n      <Modal.Header>Error!</Modal.Header>\n      <Modal.Content>\n        <p>{props.Message}</p>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button\n          onClick={()=>{props.closeErrorModal()}}\n          positive\n          labelPosition=\"right\"\n          icon=\"checkmark\"\n          content=\"Aceptar\"\n        />\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nexport default ErrorModal;\n","import React, { useState, useEffect } from \"react\";\n\n// redux\nimport { connect } from \"react-redux\";\n\n// react-router-dom\nimport { NavLink } from \"react-router-dom\";\n\n// history\nimport history from \"../utils/history\";\n// semantic-ui-react\nimport { Menu, Dropdown, Icon, Button } from \"semantic-ui-react\";\n\n// actions\nimport { signInSuccess, signOut } from \"../redux/auth/actions\";\n\n// components\nimport ErrorModal from \"../components/modals/ErrorModal\";\n\n// react-i18next\nimport { useTranslation } from \"react-i18next\";\n\nconst NavMenu = (props) => {\n  const { t } = useTranslation();\n\n  if (localStorage.getItem(\"user\") && !props.user.isLoggedIn) {\n    props.signInSuccess(JSON.parse(localStorage.getItem(\"user\")));\n  }\n\n  const onSignOut = () => {\n    props.signOut();\n  };\n\n  const [errorModal, setErrorModal] = useState(false);\n\n  useEffect(() => {\n    if (props.user.loginError) {\n      setErrorModal(true);\n    }\n  }, [props.user.loginError]);\n\n  const closeErrorModal = () => {\n    setErrorModal(false);\n  };\n\n  return (\n    <>\n      <ErrorModal\n        Message={props.user.loginError}\n        open={errorModal}\n        closeErrorModal={() => {\n          closeErrorModal();\n        }}\n      />\n\n      <Menu inverted className=\"nav-menu\">\n        <NavLink\n          className=\"item\"\n          to=\"/dashboard/app/home\"\n          activeClassName=\"active\"\n        >\n          {t(\"modules.navbar.home\", \"Home\")}\n        </NavLink>\n        <NavLink\n          className=\"item\"\n          to=\"/dashboard/app/store\"\n          activeClassName=\"active\"\n        >\n          {t(\"modules.navbar.store\", \"Store\")}\n        </NavLink>\n        <Menu.Menu position=\"right\">\n          {props.user.isLoggedIn && (\n            <Dropdown item text={props.user.username}>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  onClick={() => {\n                    history.push(\"/dashboard/app/account/basicinfo\");\n                  }}\n                >\n                  <Icon name=\"user\" /> {t(\"modules.navbar.account\", \"Account\")}\n                </Dropdown.Item>\n                <Dropdown.Item onClick={onSignOut}>\n                  <Icon name=\"log out\" />\n                  {t(\"modules.navbar.logout\", \"Log out\")}\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          )}\n\n          {props.user.isLoggedIn !== true && (\n            <Menu.Item>\n              <Button\n                primary\n                onClick={() => {\n                  history.push(\"/dashboard/user/signin\");\n                }}\n              >\n                {t(\"modules.navbar.signin\", \"Sign In\")}\n              </Button>\n            </Menu.Item>\n          )}\n\n          {props.user.isLoggedIn !== true && (\n            <Menu.Item>\n              <Button\n                onClick={() => {\n                  history.push(\"/signup\");\n                }}\n              >\n                {t(\"modules.navbar.signup\", \"Sign up\")}\n              </Button>\n            </Menu.Item>\n          )}\n        </Menu.Menu>\n      </Menu>\n      {props.children}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return { user: state.user };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signOut: () => dispatch(signOut()),\n    signInSuccess: (user) => dispatch(signInSuccess(user)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavMenu);\n","import React from \"react\";\n\n// router\nimport { Route, Redirect } from \"react-router-dom\";\n\n// layout\nimport AppLayout from \"../layout/AppLayout\";\n\n// components\nconst AppViews = React.lazy(() => import(\"./app\"));\nconst UserViews = React.lazy(() => import(\"./user\"));\n\nexport const App = (props) => {\n  return (\n    <AppLayout>\n      <div className=\"ui container\">\n        <Route path={`${props.match.path}/`} exact>\n          <Redirect to={`${props.match.path}/app`} />\n        </Route>\n        <Route path={`${props.match.path}/app`} component={AppViews} />\n        <Route path={`${props.match.path}/user`} component={UserViews} />\n      </div>\n    </AppLayout>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}